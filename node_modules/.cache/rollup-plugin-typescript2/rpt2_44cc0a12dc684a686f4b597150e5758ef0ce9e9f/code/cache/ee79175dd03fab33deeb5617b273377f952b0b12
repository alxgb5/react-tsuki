{"code":"import { __awaiter, __generator } from \"tslib\";\nimport { useState, useEffect } from \"react\";\n/**\n * Custom hook for making fetch requests with the ability to cancel the request.\n *\n * @template T - The type of the response data.\n * @param {string} url - The URL to fetch the data from.\n * @returns {{\n *   data: T | null;\n *   loading: boolean;\n *   error: Error | null;\n *   cancel: () => void;\n * }} - An object containing the fetched data, loading state, error state, and a cancel function.\n */\nvar useFetchWithCancel = function (url) {\n    var _a = useState(null), data = _a[0], setData = _a[1];\n    var _b = useState(true), loading = _b[0], setLoading = _b[1];\n    var _c = useState(null), error = _c[0], setError = _c[1];\n    var controller = useState(function () { return new AbortController(); })[0];\n    useEffect(function () {\n        var fetchData = function () { return __awaiter(void 0, void 0, void 0, function () {\n            var response, result, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        setLoading(true);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, 5, 6]);\n                        return [4 /*yield*/, fetch(url, { signal: controller.signal })];\n                    case 2:\n                        response = _a.sent();\n                        if (!response.ok) {\n                            throw new Error(\"Network response was not ok\");\n                        }\n                        return [4 /*yield*/, response.json()];\n                    case 3:\n                        result = _a.sent();\n                        setData(result);\n                        return [3 /*break*/, 6];\n                    case 4:\n                        err_1 = _a.sent();\n                        if (err_1.name !== \"AbortError\") {\n                            setError(err_1);\n                        }\n                        return [3 /*break*/, 6];\n                    case 5:\n                        setLoading(false);\n                        return [7 /*endfinally*/];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        }); };\n        fetchData();\n        return function () {\n            controller.abort();\n        };\n    }, [url, controller]);\n    return { data: data, loading: loading, error: error, cancel: function () { return controller.abort(); } };\n};\nexport default useFetchWithCancel;\n","references":["/Users/alxgb/Code/tsui-kit/node_modules/@types/react/index.d.ts"],"dtsmap":{"name":"/Users/alxgb/Code/tsui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/hooks/fetch/useFetchWithCancel.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"useFetchWithCancel.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/hooks/fetch/useFetchWithCancel.tsx\"],\"names\":[],\"mappings\":\"AAEA;;;;;;;;;;;GAWG;AACH,QAAA,MAAM,kBAAkB,WACjB,MAAM,KACV;IACD,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC;IACf,OAAO,EAAE,OAAO,CAAC;IACjB,KAAK,EAAE,KAAK,GAAG,IAAI,CAAC;IACpB,MAAM,EAAE,MAAM,IAAI,CAAC;CAkCpB,CAAC;AAEF,eAAe,kBAAkB,CAAC\"}"},"dts":{"name":"/Users/alxgb/Code/tsui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/hooks/fetch/useFetchWithCancel.d.ts","writeByteOrderMark":false,"text":"/**\n * Custom hook for making fetch requests with the ability to cancel the request.\n *\n * @template T - The type of the response data.\n * @param {string} url - The URL to fetch the data from.\n * @returns {{\n *   data: T | null;\n *   loading: boolean;\n *   error: Error | null;\n *   cancel: () => void;\n * }} - An object containing the fetched data, loading state, error state, and a cancel function.\n */\ndeclare const useFetchWithCancel: <T>(url: string) => {\n    data: T | null;\n    loading: boolean;\n    error: Error | null;\n    cancel: () => void;\n};\nexport default useFetchWithCancel;\n//# sourceMappingURL=useFetchWithCancel.d.ts.map"}}
