{"code":"import { useState } from \"react\";\n/**\n * Custom hook for managing a value in local storage.\n *\n * @template T - The type of the value to be stored in local storage.\n * @param {string} key - The key used to store the value in local storage.\n * @param {T} initialValue - The initial value to be stored in local storage if no value is found.\n * @returns {[T, (value: T) => void]} - A tuple containing the stored value and a function to update the value.\n */\nvar useLocalStorage = function (key, initialValue) {\n    var _a = useState(function () {\n        try {\n            var item = window.localStorage.getItem(key);\n            return item ? JSON.parse(item) : initialValue;\n        }\n        catch (error) {\n            console.warn(error);\n            return initialValue;\n        }\n    }), storedValue = _a[0], setStoredValue = _a[1];\n    var setValue = function (value) {\n        try {\n            setStoredValue(value);\n            window.localStorage.setItem(key, JSON.stringify(value));\n        }\n        catch (error) {\n            console.warn(error);\n        }\n    };\n    return [storedValue, setValue];\n};\nexport default useLocalStorage;\n","references":["/Users/alxgb/Code/tsui-kit/node_modules/@types/react/index.d.ts"],"dtsmap":{"name":"/Users/alxgb/Code/tsui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/hooks/useLocalStorage.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"useLocalStorage.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/useLocalStorage.tsx\"],\"names\":[],\"mappings\":\"AAEA;;;;;;;GAOG;AACH,QAAA,MAAM,eAAe,WACd,MAAM,gBACG,CAAC,KACd,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,IAAI,CAqBxB,CAAC;AAEF,eAAe,eAAe,CAAC\"}"},"dts":{"name":"/Users/alxgb/Code/tsui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/hooks/useLocalStorage.d.ts","writeByteOrderMark":false,"text":"/**\n * Custom hook for managing a value in local storage.\n *\n * @template T - The type of the value to be stored in local storage.\n * @param {string} key - The key used to store the value in local storage.\n * @param {T} initialValue - The initial value to be stored in local storage if no value is found.\n * @returns {[T, (value: T) => void]} - A tuple containing the stored value and a function to update the value.\n */\ndeclare const useLocalStorage: <T>(key: string, initialValue: T) => [T, (value: T) => void];\nexport default useLocalStorage;\n//# sourceMappingURL=useLocalStorage.d.ts.map"}}
