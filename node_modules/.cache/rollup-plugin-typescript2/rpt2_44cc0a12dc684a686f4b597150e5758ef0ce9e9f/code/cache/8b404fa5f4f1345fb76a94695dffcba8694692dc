{"code":"import { __awaiter, __generator } from \"tslib\";\nimport { useState, useEffect } from \"react\";\n/**\n * Custom hook for fetching data from a URL.\n *\n * @template T - The type of the data to be fetched.\n * @param {string} url - The URL to fetch the data from.\n * @returns {Object} - An object containing the fetched data, loading state, and error state.\n */\nvar useFetch = function (url) {\n    var _a = useState(null), data = _a[0], setData = _a[1];\n    var _b = useState(true), loading = _b[0], setLoading = _b[1];\n    var _c = useState(null), error = _c[0], setError = _c[1];\n    useEffect(function () {\n        var fetchData = function () { return __awaiter(void 0, void 0, void 0, function () {\n            var response, result, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        setLoading(true);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, 5, 6]);\n                        return [4 /*yield*/, fetch(url)];\n                    case 2:\n                        response = _a.sent();\n                        return [4 /*yield*/, response.json()];\n                    case 3:\n                        result = _a.sent();\n                        setData(result);\n                        return [3 /*break*/, 6];\n                    case 4:\n                        error_1 = _a.sent();\n                        setError(error_1);\n                        return [3 /*break*/, 6];\n                    case 5:\n                        setLoading(false);\n                        return [7 /*endfinally*/];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        }); };\n        fetchData();\n    }, [url]);\n    return { data: data, loading: loading, error: error };\n};\nexport default useFetch;\n","references":["/Users/alxgb/Code/tsui-kit/node_modules/@types/react/index.d.ts"],"dtsmap":{"name":"/Users/alxgb/Code/tsui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/hooks/useFetch.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"useFetch.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/useFetch.tsx\"],\"names\":[],\"mappings\":\"AAEA;;;;;;GAMG;AACH,QAAA,MAAM,QAAQ,WACP,MAAM,KACV;IAAE,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC;IAAC,OAAO,EAAE,OAAO,CAAC;IAAC,KAAK,EAAE,KAAK,GAAG,IAAI,CAAA;CAuBzD,CAAC;AAEF,eAAe,QAAQ,CAAC\"}"},"dts":{"name":"/Users/alxgb/Code/tsui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/hooks/useFetch.d.ts","writeByteOrderMark":false,"text":"/**\n * Custom hook for fetching data from a URL.\n *\n * @template T - The type of the data to be fetched.\n * @param {string} url - The URL to fetch the data from.\n * @returns {Object} - An object containing the fetched data, loading state, and error state.\n */\ndeclare const useFetch: <T>(url: string) => {\n    data: T | null;\n    loading: boolean;\n    error: Error | null;\n};\nexport default useFetch;\n//# sourceMappingURL=useFetch.d.ts.map"}}
