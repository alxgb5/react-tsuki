{"code":"import { __awaiter, __generator } from \"tslib\";\nimport { useState, useEffect, useCallback } from \"react\";\n/**\n * Custom hook for fetching data with retry functionality.\n *\n * @template T - The type of the data being fetched.\n * @param {string} url - The URL to fetch the data from.\n * @param {number} [retries=3] - The number of retries in case of failure.\n * @returns {{\n *   data: T | null;\n *   loading: boolean;\n *   error: Error | null;\n *   retry: () => void;\n * }} - An object containing the fetched data, loading state, error state, and a retry function.\n */\nvar useRetryFetch = function (url, retries) {\n    if (retries === void 0) { retries = 3; }\n    var _a = useState(null), data = _a[0], setData = _a[1];\n    var _b = useState(true), loading = _b[0], setLoading = _b[1];\n    var _c = useState(null), error = _c[0], setError = _c[1];\n    var _d = useState(0), attempt = _d[0], setAttempt = _d[1];\n    var fetchData = useCallback(function () { return __awaiter(void 0, void 0, void 0, function () {\n        var response, result, err_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    setLoading(true);\n                    setError(null);\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 4, 5, 6]);\n                    return [4 /*yield*/, fetch(url)];\n                case 2:\n                    response = _a.sent();\n                    if (!response.ok) {\n                        throw new Error(\"Network response was not ok\");\n                    }\n                    return [4 /*yield*/, response.json()];\n                case 3:\n                    result = _a.sent();\n                    setData(result);\n                    return [3 /*break*/, 6];\n                case 4:\n                    err_1 = _a.sent();\n                    setError(err_1);\n                    if (attempt < retries) {\n                        setAttempt(function (prev) { return prev + 1; });\n                    }\n                    return [3 /*break*/, 6];\n                case 5:\n                    setLoading(false);\n                    return [7 /*endfinally*/];\n                case 6: return [2 /*return*/];\n            }\n        });\n    }); }, [url, attempt, retries]);\n    useEffect(function () {\n        fetchData();\n    }, [fetchData]);\n    return { data: data, loading: loading, error: error, retry: fetchData };\n};\nexport default useRetryFetch;\n","references":["/Users/alxgb/Code/tsui-kit/node_modules/@types/react/index.d.ts"],"dtsmap":{"name":"/Users/alxgb/Code/tsui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/hooks/fetch/useRetryFetch.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"useRetryFetch.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/hooks/fetch/useRetryFetch.tsx\"],\"names\":[],\"mappings\":\"AAEA;;;;;;;;;;;;GAYG;AACH,QAAA,MAAM,aAAa,WACZ,MAAM,YACF,MAAM,KACd;IACD,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC;IACf,OAAO,EAAE,OAAO,CAAC;IACjB,KAAK,EAAE,KAAK,GAAG,IAAI,CAAC;IACpB,KAAK,EAAE,MAAM,IAAI,CAAC;CAgCnB,CAAC;AAEF,eAAe,aAAa,CAAC\"}"},"dts":{"name":"/Users/alxgb/Code/tsui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/hooks/fetch/useRetryFetch.d.ts","writeByteOrderMark":false,"text":"/**\n * Custom hook for fetching data with retry functionality.\n *\n * @template T - The type of the data being fetched.\n * @param {string} url - The URL to fetch the data from.\n * @param {number} [retries=3] - The number of retries in case of failure.\n * @returns {{\n *   data: T | null;\n *   loading: boolean;\n *   error: Error | null;\n *   retry: () => void;\n * }} - An object containing the fetched data, loading state, error state, and a retry function.\n */\ndeclare const useRetryFetch: <T>(url: string, retries?: number) => {\n    data: T | null;\n    loading: boolean;\n    error: Error | null;\n    retry: () => void;\n};\nexport default useRetryFetch;\n//# sourceMappingURL=useRetryFetch.d.ts.map"}}
