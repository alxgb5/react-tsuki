{"code":"import { useState, useRef, useEffect } from \"react\";\n/**\n * Custom hook that tracks whether an element is being hovered over.\n *\n * @template T - The type of the element being tracked.\n * @returns A tuple containing a ref object and a boolean value indicating whether the element is being hovered over.\n */\nvar useHover = function () {\n    var _a = useState(false), isHovered = _a[0], setIsHovered = _a[1];\n    var ref = useRef(null);\n    useEffect(function () {\n        var handleMouseOver = function () { return setIsHovered(true); };\n        var handleMouseOut = function () { return setIsHovered(false); };\n        var node = ref.current;\n        if (node) {\n            node.addEventListener(\"mouseover\", handleMouseOver);\n            node.addEventListener(\"mouseout\", handleMouseOut);\n            return function () {\n                node.removeEventListener(\"mouseover\", handleMouseOver);\n                node.removeEventListener(\"mouseout\", handleMouseOut);\n            };\n        }\n    }, [ref]);\n    return [ref, isHovered];\n};\nexport default useHover;\n","references":["/Users/alxgb/Code/tsui-kit/node_modules/@types/react/index.d.ts"],"dtsmap":{"name":"/Users/alxgb/Code/tsui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/hooks/useHover.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"useHover.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/useHover.tsx\"],\"names\":[],\"mappings\":\"AAEA;;;;;GAKG;AACH,QAAA,MAAM,QAAQ,+BAA8B,CAAC,MAAM,SAAS,CAAC,CAAC,CAAC,EAAE,OAAO,CAqBvE,CAAC;AAEF,eAAe,QAAQ,CAAC\"}"},"dts":{"name":"/Users/alxgb/Code/tsui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/hooks/useHover.d.ts","writeByteOrderMark":false,"text":"/**\n * Custom hook that tracks whether an element is being hovered over.\n *\n * @template T - The type of the element being tracked.\n * @returns A tuple containing a ref object and a boolean value indicating whether the element is being hovered over.\n */\ndeclare const useHover: <T extends HTMLElement>() => [React.RefObject<T>, boolean];\nexport default useHover;\n//# sourceMappingURL=useHover.d.ts.map"}}
